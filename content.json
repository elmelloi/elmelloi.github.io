{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"王振丰","url":"http://wangzf.top"},"pages":[],"posts":[{"title":"localStorage使用总结","slug":"localStorage使用总结","date":"2017-02-26T13:31:47.000Z","updated":"2017-05-11T13:59:07.620Z","comments":true,"path":"2017/02/26/localStorage使用总结/","link":"","permalink":"http://wangzf.top/2017/02/26/localStorage使用总结/","excerpt":"","text":"什么是localStoragelocalStorage主要是用来作为本地存储来使用的，解决了cookie存储空间不足的问题(cookie中每条cookie的存储空间为4k)，localStorage中一般浏览器支持的是5M大小。 sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。 localStorage的优势与局限localStorage的优势 localStorage拓展了cookie的4K限制 localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽(但是这个却是只有在高版本的浏览器中才支持的)。 localStorage的局限 兼容性（IE8以上） 目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换。 localStorage在浏览器的隐私模式下面是不可读取的 localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡。 localStorage不能被爬虫抓取到 localStorage的使用 首先在使用localStorage的时候，我们需要判断浏览器是否支持localStorage这个属性 if(！window.localStorage){ alert(&quot;浏览器支持localstorage&quot;); return false; }else{ //主逻辑业务 } localStorage的写入和读取，localStorage的写入和读取 有三种方法(无论哪一种都要有键值，而不是索引) if(！window.localStorage){ alert(&quot;浏览器不支持localstorage&quot;); return false; }else{ var storage=window.localStorage; //写入a字段 storage[&quot;a&quot;]=1; //写入b字段 storage.a=1; //写入c字段 storage.setItem(&quot;c&quot;,3); console.log(typeof storage[&quot;a&quot;]); console.log(typeof storage[&quot;b&quot;]); console.log(typeof storage[&quot;c&quot;]); //第一种方法读取 var a=storage.a; console.log(a); //第二种方法读取 var b=storage[&quot;b&quot;]; console.log(b); //第三种方法读取 var c=storage.getItem(&quot;c&quot;); console.log(c); } 打印结果是3个String。刚刚存储进去的是int类型，但是打印出来却是string类型，这个与localStorage本身的特点有关，localStorage只支持string类型的存储。 其中官方推荐的是getItem\\setItem这两种方法对其进行存取。 storage.a=4;//修改 localStorage的删除 将localStorage的所有内容清除 storage.clear(); 将localStorage中的某个键值对删除 storage.removeItem(&quot;a&quot;); localStorage的键获取var storage=window.localStorage; storage.a=1; storage.setItem(&quot;c&quot;,3); for(var i=0;i&lt;storage.length;i++){ var key=storage.key(i); console.log(key); } 使用key()方法，向其中出入索引即可获取对应的键 localStorage其他注意事项一般我们会将JSON存入localStorage中，但是在localStorage会自动将localStorage转换成为字符串形式 这个时候我们可以使用JSON.stringify()这个方法，来将JSON转换成为JSON字符串 if(!window.localStorage){ alert(&quot;浏览器支持localstorage&quot;); }else{ var storage=window.localStorage; var data={ name:&apos;xiecanyong&apos;, sex:&apos;man&apos;, hobby:&apos;program&apos; }; var d=JSON.stringify(data); storage.setItem(&quot;data&quot;,d); console.log(storage.data); } 读取之后要将JSON字符串转换成为JSON对象，使用JSON.parse()方法 var storage=window.localStorage; var data={ name:&apos;xiecanyong&apos;, sex:&apos;man&apos;, hobby:&apos;program&apos; }; var d=JSON.stringify(data); storage.setItem(&quot;data&quot;,d); //将JSON字符串转换成为JSON对象输出 var json=storage.getItem(&quot;data&quot;); var jsonObj=JSON.parse(json); console.log(typeof jsonObj); 打印出来是Object对象 另外还有一点要注意的是，其他类型读取出来也要进行转换。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://wangzf.top/tags/JavaScript/"}]},{"title":"Hexo + github 踩坑历程","slug":"Hexo + github 踩坑历程","date":"2017-02-20T11:46:05.000Z","updated":"2017-05-11T13:58:46.986Z","comments":true,"path":"2017/02/20/Hexo + github 踩坑历程/","link":"","permalink":"http://wangzf.top/2017/02/20/Hexo + github 踩坑历程/","excerpt":"","text":"本来按照别人的教程来搭建个人博客是最省事的方式，但读者水平不同，作者也不可能把所有的细节都写进教程里，所以掉进坑里是难免的。于是写下此文来记录自己的踩的坑。 墙翻墙是程序员的必备技能，一部分人是使用shadowsocks来翻墙的。这就导致在PAC模式下，可能无法访问到你的github.io域名，开启全局模式即可。 _config.yml_config.yml要小心配置，此文件有格式的要求。 每一项key和value之间要有空格。如下所示： 1avatar: https://avatars2.githubusercontent.com/u/13270717?v=3&amp;s=460 hexo g -d每次将本地的博客部署的github后，到相关库的setting中，并设置它的 custom domain为你的域名。 markdown头部--- title: localStorage使用总结 date: 2017-02-26 21:31:47 tags: javascript --- 注意：key和value之间要有空格。 总结别小看这些细节，这些问题我花了一个多小时才解决。其他按照下面的教程做就没有问题了。 http://kchen.cc/2016/11/12/hexo-instructions/","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://wangzf.top/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-02-20T04:39:20.000Z","updated":"2017-05-11T13:15:57.128Z","comments":true,"path":"2017/02/20/hello-world/","link":"","permalink":"http://wangzf.top/2017/02/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}